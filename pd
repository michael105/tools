#!/usr/bin/perl 
## Print Documentation
## usage:
## pd <name>
## pd tries to find the supplied <name> in this order: module,scriptname,filename,
## if yet not found, Misc:: will be prepended.
## However, it could be necessary to supply the type of documentation by hand
##
## args:
## -m Module
## -s Script
## -f Filename
## --nc No colors
## --writepod Write the pod into the file
## --ne dont print extra information (author, website, license)
## -e	print extra information. whether --ne or -e is used by default is determined by the global var $extradocdefault
## --html Output the documentation in html format
## --compact Output in compact format
## --pod Output in pod format
## --desc Give a short description in one line
## not implemented yet..
## --lm List available modules with short description (path hardcoded yet)
## --ls List available scripts with short description (path also hardcoded)


##
my $extradocdefault = 0;

##
my $scriptdir = "/home/micha/prog/perl/scripts";

## 
my $moduledir = "/etc/perl/Misc";


BEGIN{
		use File::Basename;
		($name,$path,$suffix) = fileparse ($0);
		print "path: $path";
		push @INC, "$path/perl";
}



use Misc::Arguments;
use Misc::Documentation;

my $args = Misc::Arguments::parse('m s f nc writepod ne e html compact pod desc ls lm');

#print join("\n>\n", @ARGV ),"\n";
if ( ! scalar ( @ARGV ) ){
	Misc::Documentation::print_help();
}

if ( exists( $args->{ls} ) ){

}


foreach my $n ( @ARGV ){

my $fn = 0;
my $type = 'ansicolor';
if ( exists( $args->{nc} ) ){
	$type = 'plain';
} elsif (exists( $args->{html} ) ){
	$type = 'html';
} elsif (exists( $args->{compact} ) ){
	$type = 'compactcolor';
} elsif (exists( $args->{pod} ) ){
	$type = 'pod';
} elsif (exists( $args->{desc} ) ){
	$type = 'desc';
}






my $try = 1;
foreach ( qw/m s f writepod/ ){
	$try = 0 if ( exists( $args->{$_} ) );
}



if ( $try || exists($args->{m}) ){
	my $m = $n;
	$m =~ s/::/\//g;
	$m = $m;
	foreach my $inc ( @INC ){
		if ( -e "$inc/$m.pm" ){
			$fn = "$inc/$m.pm";
			last;
		}
			if ( -e "$inc/Misc/$m.pm" ){
			$fn = "$inc/Misc/$m.pm";
			last;
		}
	}
} 

if ( ($try || exists($args->{s})) && !$fn ){
	my $s = $n;
	foreach my $p ( split(':',$ENV{PATH}) ){
		if ( -f "$p/$s" ){
			$fn = "$p/$s";
			last;
		}
	}
#	if ( !$fn ){
#		print "Couldn't find the script $args->{s}\nExit.\n";
#		exit 1;
#	}
} 

if ( ($try || exists($args->{f})) && !$fn ){
	$fn = $n if ( -e $n );
#	if ( !-e $fn ){
#		print "The file $fn doesn't seem to exist!\nExit.\n";
#		exit 1;
#	}
} 

if ( exists( $args->{writepod} )) {
	$fn = $n;
	if ( !-e $fn ){
		print "The file $fn doesn't seem to exist!\nExit.\n";
		exit 1;
	}
	$type = 'pod';

}

if ( !$fn ){
	print "Couldn't find documentation for $n\nExit.\n";
	exit 1;
}

#print "2.\nfn: $fn\n";
my $ne = '';
if ( exists($args->{ne} ) || (($extradocdefault==0) && ( !exists($args->{e}) ) ) ) {
	$ne = 1;
}
print "\n",Misc::Documentation::documentation( filename=>$fn, type=>$type, noextradoc=>$ne );


if ( exists( $args->{writepod} )) {
	print "\nShould I write the pod section into $fn ? (y|n) ";
	my $y = getc;
	if ( $y eq 'y' ){
		my @pod = Misc::Documentation::documentation( filename=>$fn, type=>$type );
		my $msg = "#XXX  Pod automatic written by pd. EVERYTHING below will be OVERWRITTEN! XXX";
		print "Writing..\n";
		system( "cp $fn $fn.bak~" );
		my @f = Misc::Snippets::readfile($fn);
		open F, ">$fn";
		my $a = 1;
		while( my $l = shift @f ){
			print F $l;
			if ( $l =~ /$msg/ ){
				$a = 0;
				last;
			}
		}
		if ( $a ){
			print F "\n\n\n$msg\n";
		}
		print F @pod;
		close F;

	} else {
		print "Aborted.\n";
	}
}

}

